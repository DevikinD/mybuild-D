name: DXVK arm64ec Winlator Bionic

on:
  workflow_dispatch:

jobs:
  build-dxvk:
    runs-on: ubuntu-latest

    steps:
    - name: Clone dxvk repo
      uses: actions/checkout@v4
      with:
        repository: doitsujin/dxvk
        submodules: recursive
        fetch-depth: 0
        fetch-tags: true
        path: dxvk

    - name: Clone workflow repo (for custom files)
      uses: actions/checkout@v4
      with:
        path: mybuild-D

    - name: Install llvm-mingw
      run: |
        sudo mkdir -p /opt
        curl -L -o llvm-mingw.tar.xz \
          https://github.com/bylaws/llvm-mingw/releases/download/20250305/llvm-mingw-20250305-ucrt-ubuntu-20.04-x86_64.tar.xz
        sudo tar -xvf llvm-mingw.tar.xz -C /opt/
        echo "PATH=/opt/llvm-mingw-20250305-ucrt-ubuntu-20.04-x86_64/bin:$PATH" >> $GITHUB_ENV

    - name: install dep
      run: sudo apt install meson glslang-tools zstd
    
    - name: Replace build-win64.txt with custom version
      run: |
        cp mybuild-D/dxvk/build-win64.txt dxvk/build-win64.txt
        echo "Replaced build-win64.txt with custom version"
    
    - name: Get dxvk branch and commit info
      working-directory: dxvk
      run: |
        # Get the current branch name or use 'master' if in detached HEAD state
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
        if [ "$BRANCH_NAME" = "HEAD" ]; then
          # If in detached HEAD, check if we're on a tag or use 'master'
          if git describe --exact-match --tags HEAD 2>/dev/null; then
            BRANCH_NAME="tag-$(git describe --tags HEAD)"
          else
            BRANCH_NAME="master"
          fi
        fi
        
        # Get the short commit hash
        COMMIT_SHA=$(git rev-parse --short HEAD)
        
        echo "DXVK_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
        echo "DXVK_COMMIT=$COMMIT_SHA" >> $GITHUB_ENV
        echo "VERSION_NAME=${BRANCH_NAME}-${COMMIT_SHA}" >> $GITHUB_ENV

    - name: Build dxvk-arm64ec
      working-directory: dxvk
      run: |
        ./package-release.sh ${{ env.VERSION_NAME }} build

    - name: Get latest DXVK tag version (without 'v' prefix)
      id: get_version
      working-directory: dxvk
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --max-count=1))
        # Remove the 'v' prefix from the tag
        VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Latest DXVK version (without 'v'): $VERSION"

    - name: Extract and reorganize files for WCP
      run: |
        # Create build directory for WCP
        mkdir -p wcp-build
        cp dxvk/build/dxvk-${{ env.VERSION_NAME }}.tar.gz wcp-build/
        
        # Extract the tar.gz
        cd wcp-build
        mkdir -p temp_extract
        tar -xzf dxvk-${{ env.VERSION_NAME }}.tar.gz -C temp_extract
        
        # Find the extracted directory
        EXTRACTED_DIR=$(find temp_extract -name "dxvk-*" -type d)
        echo "Extracted to: $EXTRACTED_DIR"
        
        # Create new structure for WCP
        mkdir -p package/system32 package/syswow64
        
        # Move x64 files to system32
        if [ -d "$EXTRACTED_DIR/x64" ]; then
          cp "$EXTRACTED_DIR/x64/"*.dll package/system32/
          echo "Copied $(ls package/system32/ | wc -l) files to system32"
        else
          echo "WARNING: x64 directory not found in $EXTRACTED_DIR"
        fi
        
        # Move x32 files to syswow64
        if [ -d "$EXTRACTED_DIR/x32" ]; then
          cp "$EXTRACTED_DIR/x32/"*.dll package/syswow64/
          echo "Copied $(ls package/syswow64/ | wc -l) files to syswow64"
        else
          echo "WARNING: x32 directory not found in $EXTRACTED_DIR"
        fi

    - name: Verify DLL files exist
      run: |
        echo "System32 DLLs:"
        ls -la wcp-build/package/system32/ 2>/dev/null || echo "No system32 directory or no files found"
        echo ""
        echo "SysWOW64 DLLs:"
        ls -la wcp-build/package/syswow64/ 2>/dev/null || echo "No syswow64 directory or no files found"

    - name: Create profile.json
      run: |
        cat > wcp-build/package/profile.json << EOF
        {
          "type": "DXVK",
          "versionName": "${{ steps.get_version.outputs.VERSION }}-arm64ec-${{ env.DXVK_COMMIT }}",
          "versionCode": 0,
          "description": "DXVK Nightly arm64ec commit ${{ env.DXVK_COMMIT }}",
          "files": [
            {
              "source": "system32/d3d8.dll",
              "target": "\${system32}/d3d8.dll"
            },	
            {
              "source": "system32/d3d9.dll",
              "target": "\${system32}/d3d9.dll"
            },	
            {
              "source": "system32/d3d10core.dll",
              "target": "\${system32}/d3d10core.dll"
            },
            {
              "source": "system32/d3d11.dll",
              "target": "\${system32}/d3d11.dll"
            },
            {
              "source": "system32/dxgi.dll",
              "target": "\${system32}/dxgi.dll"
            },
            {
              "source": "syswow64/d3d8.dll",
              "target": "\${syswow64}/d3d8.dll"
            },	
            {
              "source": "syswow64/d3d9.dll",
              "target": "\${syswow64}/d3d9.dll"
            },	
            {
              "source": "syswow64/d3d10core.dll",
              "target": "\${syswow64}/d3d10core.dll"
            },
            {
              "source": "syswow64/d3d11.dll",
              "target": "\${syswow64}/d3d11.dll"
            },
            {
              "source": "syswow64/dxgi.dll",
              "target": "\${syswow64}/dxgi.dll"
            }
          ]
        }
        EOF
        
        echo "Created profile.json with version: ${{ steps.get_version.outputs.VERSION }}-arm64ec-${{ env.DXVK_COMMIT }}"

    - name: Create WCP package
      run: |
        cd wcp-build/package
        tar -cf - . | zstd -19 --ultra --long -o "../dxvk-${{ steps.get_version.outputs.VERSION }}-arm64ec-${{ env.DXVK_COMMIT }}.wcp"
        echo "Created WCP package: dxvk-${{ steps.get_version.outputs.VERSION }}-arm64ec-${{ env.DXVK_COMMIT }}.wcp"

    - name: Upload wcp
      uses: actions/upload-artifact@v4
      with:
        path: |
         wcp-build/dxvk-${{ steps.get_version.outputs.VERSION }}-arm64ec-${{ env.DXVK_COMMIT }}.wcp
        if-no-files-found: error
